"""
This sample demonstrates a simple skill built with the Amazon Alexa Skills Kit.
The Intent Schema, Custom Slots, and Sample Utterances for this skill, as well
as testing instructions are located at http://amzn.to/1LzFrj6

For additional samples, visit the Alexa Skills Kit Getting Started guide at
http://amzn.to/1LGWsLG
"""

from __future__ import print_function

# --------------- SAGE lookup dictionary ---------------------------------------

definitions = {"Comer Process":"The Comer Process is a school development program (SDP) associated with Yale University and named after Dr. James Comer, a faculty member in the School of Medicine. It is a well-regarded example of how to restructure organizations for improved educational practice.",
                "behavioral pediatrics":"Behavioral pediatrics (BP) is a branch of pediatrics that integrates behavioral and pediatric sciences to promote the health of children.', 'catechisms': 'A catechism is a textbook whose primary goal is to provide clear, precise, and brief answers to fundamental questions of religion. Typically structured in the question-and-answer format, a catechism proposes a basic question, and then proceeds to answer it immediately. Catechisms thus provide a quick but exact summary of religious doctrine in a highly accessible and easy-to-understand layout.",
                "self-praise":"Self-praise is the use of positive statements made to oneself after exhibiting an appropriate behavior that one desires to increase. Such self-statements increase the probability that the target behavior will occur in the future (i.e., reinforce the behavior). Self-praise is one method of self-reinforcement, and, like other self-reinforcement strategies, it typically is used within the context of self-monitoring procedures.",
                "facial screening": "Facial screening is a procedure that involves visual occlusion, that is, covering an individual's face (usually with a terry cloth towel or opaque bib) for a specific amount of time as a consequence of self-injurious or other problem behavior. Theoretically, facial screening serves as a mild punisher.",
                "negative practice":"Negative practice involves the repeated performance of a behavior with the goal of eliminating or reducing the occurrence of the behavior. The idea is that massed practice of the problem behavior creates fatigue or a similar aversive consequence and thus reduces the rates of the behavior in the future (similar to the process of positive punishment).",
                "absorbing barrier": "A barrier that prevents the spread of innovations and cultural forms."
            }


# --------------- Data store access functions ----------------------------------

import boto3
import json
import decimal
from boto3.dynamodb.conditions import Key, Attr

def query_term_datastore():

    # DynamoDB reference = arn:aws:dynamodb:us-east-1:744526292976:table/SageTerms
    
    print("Querying the data store")
    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
    table = dynamodb.Table('SageTerms')

    response = table.query(
        KeyConditionExpression=Key('Term').eq("benchmarking")
    )

    return response['Items'][0]['Definition']


# --------------- Helpers that build all of the responses ----------------------

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }


def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


# --------------- Functions that control the skill's behavior ------------------

def get_welcome_response():
    """ If we wanted to initialize the session to have some attributes we could
    add those here
    """

    session_attributes = {}
    card_title = "Welcome"
    speech_output = "Welcome to the SAGE define terms Skill. " \
                    "Please ask me which term you want to have defined by saying something like, " \
                    "SAGE define geopolitics"
    # If the user either does not reply to the welcome message or says something
    # that is not understood, they will be prompted again with this text.
    reprompt_text = "Please ask me to define a term by saying something like, " \
                    "SAGE define geopolitics."
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def handle_session_end_request():
    card_title = "Session Ended"
    speech_output = "Thank you for interacting with DukeBot, the friendly furry SAGE dog inspried bot. " \
                    "Have a nice day! "
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))


def create_favorite_color_attributes(favorite_color):
    return {"favoriteColor": favorite_color}


def set_color_in_session(intent, session):
    """ Sets the color in the session and prepares the speech to reply to the
    user.
    """

    card_title = intent['name']
    session_attributes = {}
    should_end_session = False

    if 'Color' in intent['slots']:
        favorite_color = intent['slots']['Color']['value']
        session_attributes = create_favorite_color_attributes(favorite_color)
        speech_output = "I now know your favorite color is " + \
                        favorite_color + \
                        ". You can ask me your favorite color by saying, " \
                        "what's my favorite color?"
        reprompt_text = "You can ask me your favorite color by saying, " \
                        "what's my favorite color?"
    else:
        speech_output = "I'm not sure what your favorite color is. " \
                        "Please try again."
        reprompt_text = "I'm not sure what your favorite color is. " \
                        "You can tell me your favorite color by saying, " \
                        "my favorite color is red."
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def get_color_from_session(intent, session):
    session_attributes = {}
    reprompt_text = None

    if session.get('attributes', {}) and "favoriteColor" in session.get('attributes', {}):
        favorite_color = session['attributes']['favoriteColor']
        speech_output = "Your favorite color is " + favorite_color + \
                        ". Goodbye."
        should_end_session = True
    else:
        speech_output = "I'm not sure what your favorite color is. " \
                        "You can say, my favorite color is red."
        should_end_session = False

    # Setting reprompt_text to None signifies that we do not want to reprompt
    # the user. If the user does not respond or says something that is not
    # understood, the session will end.
    return build_response(session_attributes, build_speechlet_response(
        intent['name'], speech_output, reprompt_text, should_end_session))

def get_sage_term_definition(intent, session):
    
    print(query_term_datastore())
    
    session_attributes = {}
    reprompt_text = None
    
    if 'Term' in intent['slots']:
        query_term = intent['slots']['Term']['value']
        if query_term in definitions.keys():
            speech_output = definitions[query_term]
        else:
            speech_output = "I will define things later when my neural net has evolved a bit more. Woof!"
        should_end_session = True
    else:
        speech_output = "I will define things later when my neural net has evolved a bit more. Woof!"
        should_end_session = True

    # Setting reprompt_text to None signifies that we do not want to reprompt
    # the user. If the user does not respond or says something that is not
    # understood, the session will end.
    return build_response(session_attributes, build_speechlet_response(
        intent['name'], speech_output, reprompt_text, should_end_session))


# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts """

    print("on_session_started requestId=" + session_started_request['requestId']
          + ", sessionId=" + session['sessionId'])


def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """

    print("on_launch requestId=" + launch_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # Dispatch to your skill's launch
    return get_welcome_response()


def on_intent(intent_request, session):
    """ Called when the user specifies an intent for this skill """

    print("on_intent requestId=" + intent_request['requestId'] +
          ", sessionId=" + session['sessionId'])

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']

    # Dispatch to your skill's intent handlers
    if intent_name == "MyColorIsIntent":
        return set_color_in_session(intent, session)
    elif intent_name == "WhatsMyColorIntent":
        return get_color_from_session(intent, session)
    elif intent_name == "MyTermIsIntent":
        return get_sage_term_definition(intent, session)
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.

    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("event.session.application.applicationId=" +
          event['session']['application']['applicationId'])

    """
    Uncomment this if statement and populate with your skill's application ID to
    prevent someone else from configuring a skill that sends requests to this
    function.
    """
    # if (event['session']['application']['applicationId'] !=
    #         "amzn1.echo-sdk-ams.app.[unique-value-here]"):
    #     raise ValueError("Invalid Application ID")

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
